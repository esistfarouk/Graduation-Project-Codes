
Switch_6_posiltion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002444  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000014  080025b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080025b0  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029e8  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bea  00000000  00000000  00022a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00023610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015c5  00000000  00000000  00023d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c8a  00000000  00000000  0002530d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d2ce  00000000  00000000  00027f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a5265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f80  00000000  00000000  000a52b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800253c 	.word	0x0800253c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800253c 	.word	0x0800253c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__gesf2>:
 8000d10:	f04f 3cff 	mov.w	ip, #4294967295
 8000d14:	e006      	b.n	8000d24 <__cmpsf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__lesf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	e002      	b.n	8000d24 <__cmpsf2+0x4>
 8000d1e:	bf00      	nop

08000d20 <__cmpsf2>:
 8000d20:	f04f 0c01 	mov.w	ip, #1
 8000d24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d34:	bf18      	it	ne
 8000d36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3a:	d011      	beq.n	8000d60 <__cmpsf2+0x40>
 8000d3c:	b001      	add	sp, #4
 8000d3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d42:	bf18      	it	ne
 8000d44:	ea90 0f01 	teqne	r0, r1
 8000d48:	bf58      	it	pl
 8000d4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d4e:	bf88      	it	hi
 8000d50:	17c8      	asrhi	r0, r1, #31
 8000d52:	bf38      	it	cc
 8000d54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d58:	bf18      	it	ne
 8000d5a:	f040 0001 	orrne.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d64:	d102      	bne.n	8000d6c <__cmpsf2+0x4c>
 8000d66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d6a:	d105      	bne.n	8000d78 <__cmpsf2+0x58>
 8000d6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d70:	d1e4      	bne.n	8000d3c <__cmpsf2+0x1c>
 8000d72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d76:	d0e1      	beq.n	8000d3c <__cmpsf2+0x1c>
 8000d78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__aeabi_cfrcmple>:
 8000d80:	4684      	mov	ip, r0
 8000d82:	4608      	mov	r0, r1
 8000d84:	4661      	mov	r1, ip
 8000d86:	e7ff      	b.n	8000d88 <__aeabi_cfcmpeq>

08000d88 <__aeabi_cfcmpeq>:
 8000d88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d8a:	f7ff ffc9 	bl	8000d20 <__cmpsf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	bf48      	it	mi
 8000d92:	f110 0f00 	cmnmi.w	r0, #0
 8000d96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d98 <__aeabi_fcmpeq>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff fff4 	bl	8000d88 <__aeabi_cfcmpeq>
 8000da0:	bf0c      	ite	eq
 8000da2:	2001      	moveq	r0, #1
 8000da4:	2000      	movne	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_fcmplt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffea 	bl	8000d88 <__aeabi_cfcmpeq>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_fcmple>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffe0 	bl	8000d88 <__aeabi_cfcmpeq>
 8000dc8:	bf94      	ite	ls
 8000dca:	2001      	movls	r0, #1
 8000dcc:	2000      	movhi	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_fcmpge>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffd2 	bl	8000d80 <__aeabi_cfrcmple>
 8000ddc:	bf94      	ite	ls
 8000dde:	2001      	movls	r0, #1
 8000de0:	2000      	movhi	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_fcmpgt>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffc8 	bl	8000d80 <__aeabi_cfrcmple>
 8000df0:	bf34      	ite	cc
 8000df2:	2001      	movcc	r0, #1
 8000df4:	2000      	movcs	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_f2uiz>:
 8000dfc:	0042      	lsls	r2, r0, #1
 8000dfe:	d20e      	bcs.n	8000e1e <__aeabi_f2uiz+0x22>
 8000e00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e04:	d30b      	bcc.n	8000e1e <__aeabi_f2uiz+0x22>
 8000e06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e0e:	d409      	bmi.n	8000e24 <__aeabi_f2uiz+0x28>
 8000e10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e18:	fa23 f002 	lsr.w	r0, r3, r2
 8000e1c:	4770      	bx	lr
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	4770      	bx	lr
 8000e24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e28:	d101      	bne.n	8000e2e <__aeabi_f2uiz+0x32>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	d102      	bne.n	8000e34 <__aeabi_f2uiz+0x38>
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e32:	4770      	bx	lr
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MADC1_voidInit>:
#include "../Inc/MCAL/ADC/ADC_interface.h"
#include "../Inc/MCAL/STK/STK_interface.h"


void MADC1_voidInit()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	MSTK_voidInit();
 8000e40:	f000 fe92 	bl	8001b68 <MSTK_voidInit>
	ADC_1->ADC_CR[0]=0;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
	ADC_1->ADC_CR[1]=0;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
	ADC_1->ADC_CR[1]|=1; //ADCON
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6093      	str	r3, [r2, #8]
	ADC_1->ADC_SMPR[1]=0;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
	ADC_1->ADC_SMPR[1]|=1; //channel 0 (7.5 cycles)
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6113      	str	r3, [r2, #16]
	ADC_1->ADC_SMPR[1]|=(1<<3); //channel 1 (7.5 cycles)
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <MADC1_voidInit+0x4c>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6113      	str	r3, [r2, #16]
	MSTK_voidSetBusyWait(1000);
 8000e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7e:	f000 fe7f 	bl	8001b80 <MSTK_voidSetBusyWait>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012400 	.word	0x40012400

08000e8c <MDIO_voidSetPinDirection>:

#include "../Inc/MCAL/GPIO/GPIO_interface.h"
#include "../Inc/MCAL/GPIO/GPIO_private.h"

void	MDIO_voidSetPinDirection	(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Direction )
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	460b      	mov	r3, r1
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	717b      	strb	r3, [r7, #5]
		/*		Range Check			*/
	if(Copy_u8PortID<3 && Copy_u8PinID<16)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	f200 80c0 	bhi.w	8001026 <MDIO_voidSetPinDirection+0x19a>
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	f200 80bc 	bhi.w	8001026 <MDIO_voidSetPinDirection+0x19a>
	{
		switch(Copy_u8PortID)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d07a      	beq.n	8000faa <MDIO_voidSetPinDirection+0x11e>
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	f300 80b6 	bgt.w	8001026 <MDIO_voidSetPinDirection+0x19a>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <MDIO_voidSetPinDirection+0x38>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d03a      	beq.n	8000f38 <MDIO_voidSetPinDirection+0xac>
				GPIOC->GPIOC_CRH	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
			}else{	/*	Return Error */	}		break;
		}
		
	}else{	/*	Return Error		*/	}	
}
 8000ec2:	e0b0      	b.n	8001026 <MDIO_voidSetPinDirection+0x19a>
			if(Copy_u8PinID <8)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b07      	cmp	r3, #7
 8000ec8:	d817      	bhi.n	8000efa <MDIO_voidSetPinDirection+0x6e>
				GPIOA->GPIOA_CRL	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	79ba      	ldrb	r2, [r7, #6]
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	4611      	mov	r1, r2
 8000edc:	4a54      	ldr	r2, [pc, #336]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000ede:	400b      	ands	r3, r1
 8000ee0:	6013      	str	r3, [r2, #0]
				GPIOA->GPIOA_CRL	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8000ee2:	4b53      	ldr	r3, [pc, #332]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	7979      	ldrb	r1, [r7, #5]
 8000ee8:	79ba      	ldrb	r2, [r7, #6]
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	6013      	str	r3, [r2, #0]
			}else{	/*	Return Error */	}		break;
 8000ef8:	e090      	b.n	800101c <MDIO_voidSetPinDirection+0x190>
			else if(Copy_u8PinID <16)
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	f200 808d 	bhi.w	800101c <MDIO_voidSetPinDirection+0x190>
				Copy_u8PinID -= 8;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	3b08      	subs	r3, #8
 8000f06:	71bb      	strb	r3, [r7, #6]
				GPIOA->GPIOA_CRH	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	210f      	movs	r1, #15
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	43d2      	mvns	r2, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4a45      	ldr	r2, [pc, #276]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	6053      	str	r3, [r2, #4]
				GPIOA->GPIOA_CRH	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8000f20:	4b43      	ldr	r3, [pc, #268]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	7979      	ldrb	r1, [r7, #5]
 8000f26:	79ba      	ldrb	r2, [r7, #6]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <MDIO_voidSetPinDirection+0x1a4>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6053      	str	r3, [r2, #4]
			}else{	/*	Return Error */	}		break;
 8000f36:	e071      	b.n	800101c <MDIO_voidSetPinDirection+0x190>
			if(Copy_u8PinID <8)
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	2b07      	cmp	r3, #7
 8000f3c:	d817      	bhi.n	8000f6e <MDIO_voidSetPinDirection+0xe2>
				GPIOB->GPIOB_CRL	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	210f      	movs	r1, #15
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4a38      	ldr	r2, [pc, #224]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f52:	400b      	ands	r3, r1
 8000f54:	6013      	str	r3, [r2, #0]
				GPIOB->GPIOB_CRL	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	7979      	ldrb	r1, [r7, #5]
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4611      	mov	r1, r2
 8000f66:	4a33      	ldr	r2, [pc, #204]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
			}else{	/*	Return Error */	}		break;
 8000f6c:	e058      	b.n	8001020 <MDIO_voidSetPinDirection+0x194>
			}else if(Copy_u8PinID <16)
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d855      	bhi.n	8001020 <MDIO_voidSetPinDirection+0x194>
				Copy_u8PinID -= 8;
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	3b08      	subs	r3, #8
 8000f78:	71bb      	strb	r3, [r7, #6]
				GPIOB->GPIOB_CRH	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	210f      	movs	r1, #15
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f8e:	400b      	ands	r3, r1
 8000f90:	6053      	str	r3, [r2, #4]
				GPIOB->GPIOB_CRH	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	7979      	ldrb	r1, [r7, #5]
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a24      	ldr	r2, [pc, #144]	; (8001034 <MDIO_voidSetPinDirection+0x1a8>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6053      	str	r3, [r2, #4]
			}else{	/*	Return Error */	}		break;
 8000fa8:	e03a      	b.n	8001020 <MDIO_voidSetPinDirection+0x194>
			if(Copy_u8PinID <8)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d817      	bhi.n	8000fe0 <MDIO_voidSetPinDirection+0x154>
				GPIOC->GPIOC_CRL	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	210f      	movs	r1, #15
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	43d2      	mvns	r2, r2
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
				GPIOC->GPIOC_CRL	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7979      	ldrb	r1, [r7, #5]
 8000fce:	79ba      	ldrb	r2, [r7, #6]
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	6013      	str	r3, [r2, #0]
			}else{	/*	Return Error */	}		break;
 8000fde:	e021      	b.n	8001024 <MDIO_voidSetPinDirection+0x198>
			}else if(Copy_u8PinID <16)
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d81e      	bhi.n	8001024 <MDIO_voidSetPinDirection+0x198>
				Copy_u8PinID -= 8;
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	71bb      	strb	r3, [r7, #6]
				GPIOC->GPIOC_CRH	&=~((0b1111)			<< (Copy_u8PinID * 4));
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	79ba      	ldrb	r2, [r7, #6]
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	43d2      	mvns	r2, r2
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8001000:	400b      	ands	r3, r1
 8001002:	6053      	str	r3, [r2, #4]
				GPIOC->GPIOC_CRH	|=((Copy_u8Direction)	<< (Copy_u8PinID * 4));
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	7979      	ldrb	r1, [r7, #5]
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4611      	mov	r1, r2
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <MDIO_voidSetPinDirection+0x1ac>)
 8001016:	430b      	orrs	r3, r1
 8001018:	6053      	str	r3, [r2, #4]
			}else{	/*	Return Error */	}		break;
 800101a:	e003      	b.n	8001024 <MDIO_voidSetPinDirection+0x198>
			}else{	/*	Return Error */	}		break;
 800101c:	bf00      	nop
 800101e:	e002      	b.n	8001026 <MDIO_voidSetPinDirection+0x19a>
			}else{	/*	Return Error */	}		break;
 8001020:	bf00      	nop
 8001022:	e000      	b.n	8001026 <MDIO_voidSetPinDirection+0x19a>
			}else{	/*	Return Error */	}		break;
 8001024:	bf00      	nop
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000

0800103c <MDIO_voidSetPinValue>:

//DIO_voidSetPinValue		(GPIO_U8_PORTA ,GPIO_U8_PIN0 ,GPIO_U8_HIGH	);
void	MDIO_voidSetPinValue		(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value		)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	460b      	mov	r3, r1
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	4613      	mov	r3, r2
 800104c:	717b      	strb	r3, [r7, #5]
	/*		Range Check			*/
	if(Copy_u8PortID<3 && Copy_u8PinID<16)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d840      	bhi.n	80010d6 <MDIO_voidSetPinValue+0x9a>
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d83d      	bhi.n	80010d6 <MDIO_voidSetPinValue+0x9a>
	{
		if(Copy_u8Value == GPIO_U8_HIGH)
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d11b      	bne.n	8001098 <MDIO_voidSetPinValue+0x5c>
		{
			switch(Copy_u8PortID)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d012      	beq.n	800108c <MDIO_voidSetPinValue+0x50>
 8001066:	2b02      	cmp	r3, #2
 8001068:	dc35      	bgt.n	80010d6 <MDIO_voidSetPinValue+0x9a>
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <MDIO_voidSetPinValue+0x38>
 800106e:	2b01      	cmp	r3, #1
 8001070:	d006      	beq.n	8001080 <MDIO_voidSetPinValue+0x44>
			break;
			}	
		}else{	/*	Return Error	*/}
		
	}else{	/*	Return Error		*/	}
}
 8001072:	e030      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
					GPIOA->GPIOA_BSRR = (1<<Copy_u8PinID);
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MDIO_voidSetPinValue+0xa4>)
 800107c:	611a      	str	r2, [r3, #16]
				break;
 800107e:	e02a      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
					GPIOB->GPIOB_BSRR = (1<<Copy_u8PinID);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MDIO_voidSetPinValue+0xa8>)
 8001088:	611a      	str	r2, [r3, #16]
				break;
 800108a:	e024      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
					GPIOC->GPIOC_BSRR = (1<<Copy_u8PinID);
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2201      	movs	r2, #1
 8001090:	409a      	lsls	r2, r3
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MDIO_voidSetPinValue+0xac>)
 8001094:	611a      	str	r2, [r3, #16]
				break;
 8001096:	e01e      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
		}else if (Copy_u8Value == GPIO_U8_LOW)
 8001098:	797b      	ldrb	r3, [r7, #5]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d11b      	bne.n	80010d6 <MDIO_voidSetPinValue+0x9a>
			switch(Copy_u8PortID)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d012      	beq.n	80010ca <MDIO_voidSetPinValue+0x8e>
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	dc16      	bgt.n	80010d6 <MDIO_voidSetPinValue+0x9a>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <MDIO_voidSetPinValue+0x76>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d006      	beq.n	80010be <MDIO_voidSetPinValue+0x82>
}
 80010b0:	e011      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
				GPIOA->GPIOA_BRR = (1<<Copy_u8PinID);
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	2201      	movs	r2, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MDIO_voidSetPinValue+0xa4>)
 80010ba:	615a      	str	r2, [r3, #20]
			break;
 80010bc:	e00b      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
				GPIOB->GPIOB_BRR = (1<<Copy_u8PinID);
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2201      	movs	r2, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MDIO_voidSetPinValue+0xa8>)
 80010c6:	615a      	str	r2, [r3, #20]
			break;
 80010c8:	e005      	b.n	80010d6 <MDIO_voidSetPinValue+0x9a>
				GPIOC->GPIOC_BRR = (1<<Copy_u8PinID);
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	2201      	movs	r2, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <MDIO_voidSetPinValue+0xac>)
 80010d2:	615a      	str	r2, [r3, #20]
			break;
 80010d4:	bf00      	nop
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40011000 	.word	0x40011000

080010ec <MDIO_u8GetPinValue>:
u8		MDIO_u8GetPinValue		(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	u8	Local_u8Value	= 0x55 ;
 80010fc:	2355      	movs	r3, #85	; 0x55
 80010fe:	73fb      	strb	r3, [r7, #15]
	/*		Range Check			*/
	if(Copy_u8PortID<3 && Copy_u8PinID<16)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d82a      	bhi.n	800115c <MDIO_u8GetPinValue+0x70>
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d827      	bhi.n	800115c <MDIO_u8GetPinValue+0x70>
	{
		switch(Copy_u8PortID)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d01a      	beq.n	8001148 <MDIO_u8GetPinValue+0x5c>
 8001112:	2b02      	cmp	r3, #2
 8001114:	dc22      	bgt.n	800115c <MDIO_u8GetPinValue+0x70>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <MDIO_u8GetPinValue+0x34>
 800111a:	2b01      	cmp	r3, #1
 800111c:	d00a      	beq.n	8001134 <MDIO_u8GetPinValue+0x48>
 800111e:	e01d      	b.n	800115c <MDIO_u8GetPinValue+0x70>
		{
			case	GPIO_U8_PORTA :	Local_u8Value = GET_BIT(GPIOA->GPIOA_IDR,Copy_u8PinID);	break;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MDIO_u8GetPinValue+0x7c>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	fa22 f303 	lsr.w	r3, r2, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e013      	b.n	800115c <MDIO_u8GetPinValue+0x70>
			case	GPIO_U8_PORTB :	Local_u8Value = GET_BIT(GPIOB->GPIOB_IDR,Copy_u8PinID);	break;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MDIO_u8GetPinValue+0x80>)
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	fa22 f303 	lsr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e009      	b.n	800115c <MDIO_u8GetPinValue+0x70>
			case	GPIO_U8_PORTC :	Local_u8Value = GET_BIT(GPIOC->GPIOC_IDR,Copy_u8PinID);	break;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MDIO_u8GetPinValue+0x84>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	bf00      	nop
		}		
	}else{	/*	Return Error		*/	}	
	return Local_u8Value ;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00
 8001170:	40011000 	.word	0x40011000

08001174 <MI2C_MasterInit>:
#include "../Inc/MCAL/I2C/I2C_private.h"
#include "../Inc/MCAL/I2C/I2C_interface.h"
#include "../Inc/MCAL/I2C/I2C_config.h"

void MI2C_MasterInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	I2C1->CR1 = 0;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MI2C_MasterInit+0x48>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	I2C1->CR2 = 2;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MI2C_MasterInit+0x48>)
 8001180:	2202      	movs	r2, #2
 8001182:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 10;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MI2C_MasterInit+0x48>)
 8001186:	220a      	movs	r2, #10
 8001188:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 3;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MI2C_MasterInit+0x48>)
 800118c:	2203      	movs	r2, #3
 800118e:	621a      	str	r2, [r3, #32]
	SET_BIT(I2C1->CR1,1);
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MI2C_MasterInit+0x48>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <MI2C_MasterInit+0x48>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6013      	str	r3, [r2, #0]
	SET_BIT(I2C1->CR1,4);
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MI2C_MasterInit+0x48>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <MI2C_MasterInit+0x48>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6013      	str	r3, [r2, #0]
	SET_BIT(I2C1->CR1,0);
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <MI2C_MasterInit+0x48>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <MI2C_MasterInit+0x48>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40005400 	.word	0x40005400

080011c0 <MNVIC_voidInit>:
#include	"../Inc/MCAL/NVIC/NVIC_private.h"
#include	"../Inc/MCAL/NVIC/NVIC_config.h"
#include	"../Inc/MCAL/NVIC/NVIC_interface.h"

void	MNVIC_voidInit				(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	#ifndef	SCB_AIRCR
		#define	SCB_AIRCR		*((volatile u32 *)(0xE000ED00 + 0x0C))
	#endif
	SCB_AIRCR = MNVIC_GRP_SUB;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <MNVIC_voidInit+0x14>)
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <MNVIC_voidInit+0x18>)
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed0c 	.word	0xe000ed0c
 80011d8:	05fa0500 	.word	0x05fa0500

080011dc <MNVIC_voidEnableInterrupt>:
void	MNVIC_voidEnableInterrupt	(u8 Copy_u8IntNum) //55
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	/*		Ranage	Check 		*/
	if(Copy_u8IntNum < 32)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b1f      	cmp	r3, #31
 80011ea:	d805      	bhi.n	80011f8 <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1<<Copy_u8IntNum);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2201      	movs	r2, #1
 80011f0:	409a      	lsls	r2, r3
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MNVIC_voidEnableInterrupt+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
	}else if(Copy_u8IntNum < 86)
	{
		Copy_u8IntNum -= 64 ;
		NVIC_ISER2 = (1<<Copy_u8IntNum);
	}else{		/*	return Error 			*/}
}
 80011f6:	e016      	b.n	8001226 <MNVIC_voidEnableInterrupt+0x4a>
	}else if(Copy_u8IntNum < 64)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b3f      	cmp	r3, #63	; 0x3f
 80011fc:	d808      	bhi.n	8001210 <MNVIC_voidEnableInterrupt+0x34>
		Copy_u8IntNum -= 32 ;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3b20      	subs	r3, #32
 8001202:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1<<Copy_u8IntNum);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2201      	movs	r2, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MNVIC_voidEnableInterrupt+0x58>)
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	e00a      	b.n	8001226 <MNVIC_voidEnableInterrupt+0x4a>
	}else if(Copy_u8IntNum < 86)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b55      	cmp	r3, #85	; 0x55
 8001214:	d807      	bhi.n	8001226 <MNVIC_voidEnableInterrupt+0x4a>
		Copy_u8IntNum -= 64 ;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	3b40      	subs	r3, #64	; 0x40
 800121a:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER2 = (1<<Copy_u8IntNum);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MNVIC_voidEnableInterrupt+0x5c>)
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000e104 	.word	0xe000e104
 8001238:	e000e108 	.word	0xe000e108

0800123c <MPWM_voidInit>:
#include "../Inc/MCAL/PWM/PWM_private.h"
#include "../Inc/MCAL/PWM/PWM_interface.h"


void MPWM_voidInit()
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	TIM_3->TIMx_CCER=0;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MPWM_voidInit+0x68>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM_3->TIMx_CCER,0); //enable output of channel 0
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MPWM_voidInit+0x68>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <MPWM_voidInit+0x68>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM_3->TIMx_CCER,4); //enable output of channel 1
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MPWM_voidInit+0x68>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MPWM_voidInit+0x68>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6213      	str	r3, [r2, #32]
	TIM_3->TIMx_CCMR1=0x6868; //channel 0 and channel 1 pwm mode 1 and enable output compare preload
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MPWM_voidInit+0x68>)
 8001260:	f646 0268 	movw	r2, #26728	; 0x6868
 8001264:	619a      	str	r2, [r3, #24]
	TIM_3->TIMx_CR1=0x0080; //upcounting auto reload
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MPWM_voidInit+0x68>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	601a      	str	r2, [r3, #0]
	TIM_3->TIMx_PSC=8-1; //prescaler
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <MPWM_voidInit+0x68>)
 800126e:	2207      	movs	r2, #7
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
	TIM_3->TIMx_ARR=2000-1; //max value of counter (reload)
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MPWM_voidInit+0x68>)
 8001274:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM_3->TIMx_CCR1=1000-1; //compare value for pwm
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MPWM_voidInit+0x68>)
 800127c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_3->TIMx_CCR2=1000-1; //compare value for pwm
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MPWM_voidInit+0x68>)
 8001284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_3->TIMx_EGR=1; //generate update
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MPWM_voidInit+0x68>)
 800128c:	2201      	movs	r2, #1
 800128e:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM_3->TIMx_CR1,0); //enable timer
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <MPWM_voidInit+0x68>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <MPWM_voidInit+0x68>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40000400 	.word	0x40000400

080012a8 <MRCC_voidInit>:
#include "../Inc/MCAL/RCC/RCC_int.h"
#include "../Inc/MCAL/RCC/RCC_priv.h"
#include "../Inc/MCAL/RCC/RCC_config.h"

void MRCC_voidInit()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
#if CLK_SOURCE == HSI
	//Turn on HSI
	MRCC_voidClkEnable(HSI);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f817 	bl	80012e0 <MRCC_voidClkEnable>
	//Check HSI Ready
	while(MRCC_u8CheckClockReady(HSI)==NOT_READY);
 80012b2:	bf00      	nop
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f86b 	bl	8001390 <MRCC_u8CheckClockReady>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f9      	beq.n	80012b4 <MRCC_voidInit+0xc>
	// Set Buses Prescaler
	MRCC_voidSetBusesPrescaler(AHB_PRESCALER, ABP1_PRESCALER, ABP2_PRESCALER);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f8d3 	bl	8001470 <MRCC_voidSetBusesPrescaler>
	// Switch to HSI Clock
	MRCC_voidSetClkSource(HSI);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f892 	bl	80013f4 <MRCC_voidSetClkSource>
	// Turn off HSE and PLL
	MRCC_voidClkDisable(HSE);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 f831 	bl	8001338 <MRCC_voidClkDisable>
	MRCC_voidClkDisable(PLL);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f000 f82e 	bl	8001338 <MRCC_voidClkDisable>
#endif
#else
#error CLOCK Source is not configured properly

#endif
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <MRCC_voidClkEnable>:

void MRCC_voidClkEnable(u8 A_u8ClkSource)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	switch(A_u8ClkSource)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d014      	beq.n	800131a <MRCC_voidClkEnable+0x3a>
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	dc19      	bgt.n	8001328 <MRCC_voidClkEnable+0x48>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <MRCC_voidClkEnable+0x1e>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d007      	beq.n	800130c <MRCC_voidClkEnable+0x2c>
	case HSE:
		SET_BIT(RCC->CR,HSE_ON_BIT); break;
	case PLL:
		SET_BIT(RCC->CR,PLL_ON_BIT); break;
	}
}
 80012fc:	e014      	b.n	8001328 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR,HSI_ON_BIT); break;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MRCC_voidClkEnable+0x54>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <MRCC_voidClkEnable+0x54>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00d      	b.n	8001328 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR,HSE_ON_BIT); break;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MRCC_voidClkEnable+0x54>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <MRCC_voidClkEnable+0x54>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e006      	b.n	8001328 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR,PLL_ON_BIT); break;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MRCC_voidClkEnable+0x54>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <MRCC_voidClkEnable+0x54>)
 8001320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	bf00      	nop
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <MRCC_voidClkDisable>:
void MRCC_voidClkDisable(u8 A_u8ClkSource)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	switch(A_u8ClkSource)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d014      	beq.n	8001372 <MRCC_voidClkDisable+0x3a>
 8001348:	2b02      	cmp	r3, #2
 800134a:	dc19      	bgt.n	8001380 <MRCC_voidClkDisable+0x48>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <MRCC_voidClkDisable+0x1e>
 8001350:	2b01      	cmp	r3, #1
 8001352:	d007      	beq.n	8001364 <MRCC_voidClkDisable+0x2c>
	case HSE:
		CLR_BIT(RCC->CR,HSE_ON_BIT); break;
	case PLL:
		CLR_BIT(RCC->CR,PLL_ON_BIT); break;
	}
}
 8001354:	e014      	b.n	8001380 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR,HSI_ON_BIT); break;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <MRCC_voidClkDisable+0x54>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <MRCC_voidClkDisable+0x54>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00d      	b.n	8001380 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR,HSE_ON_BIT); break;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MRCC_voidClkDisable+0x54>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <MRCC_voidClkDisable+0x54>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e006      	b.n	8001380 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR,PLL_ON_BIT); break;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <MRCC_voidClkDisable+0x54>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <MRCC_voidClkDisable+0x54>)
 8001378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	bf00      	nop
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <MRCC_u8CheckClockReady>:
u8 MRCC_u8CheckClockReady(u8 A_u8ClkSource)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	u8 local_u8ReadyFlag=0;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
	switch(A_u8ClkSource)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d016      	beq.n	80013d2 <MRCC_u8CheckClockReady+0x42>
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	dc1c      	bgt.n	80013e2 <MRCC_u8CheckClockReady+0x52>
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <MRCC_u8CheckClockReady+0x22>
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d008      	beq.n	80013c2 <MRCC_u8CheckClockReady+0x32>
 80013b0:	e017      	b.n	80013e2 <MRCC_u8CheckClockReady+0x52>
	{
	case HSI:
		local_u8ReadyFlag=GET_BIT(RCC->CR,HSI_RDY_BIT); break;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MRCC_u8CheckClockReady+0x60>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e00f      	b.n	80013e2 <MRCC_u8CheckClockReady+0x52>
	case HSE:
		local_u8ReadyFlag=GET_BIT(RCC->CR,HSE_RDY_BIT); break;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MRCC_u8CheckClockReady+0x60>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0c5b      	lsrs	r3, r3, #17
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e007      	b.n	80013e2 <MRCC_u8CheckClockReady+0x52>
	case PLL:
		local_u8ReadyFlag=GET_BIT(RCC->CR,PLL_RDY_BIT); break;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MRCC_u8CheckClockReady+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0e5b      	lsrs	r3, r3, #25
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	bf00      	nop
	}
	return local_u8ReadyFlag;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]

}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MRCC_voidSetClkSource>:
		}
		break;
	}
}
void MRCC_voidSetClkSource(u8 A_u8ClkSource)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d020      	beq.n	8001446 <MRCC_voidSetClkSource+0x52>
 8001404:	2b02      	cmp	r3, #2
 8001406:	dc2b      	bgt.n	8001460 <MRCC_voidSetClkSource+0x6c>
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <MRCC_voidSetClkSource+0x1e>
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00d      	beq.n	800142c <MRCC_voidSetClkSource+0x38>
	case PLL:
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
		break;
	}
}
 8001410:	e026      	b.n	8001460 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001424:	f023 0302 	bic.w	r3, r3, #2
 8001428:	6053      	str	r3, [r2, #4]
		break;
 800142a:	e019      	b.n	8001460 <MRCC_voidSetClkSource+0x6c>
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MRCC_voidSetClkSource+0x78>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MRCC_voidSetClkSource+0x78>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <MRCC_voidSetClkSource+0x78>)
 800143e:	f023 0302 	bic.w	r3, r3, #2
 8001442:	6053      	str	r3, [r2, #4]
		break;
 8001444:	e00c      	b.n	8001460 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <MRCC_voidSetClkSource+0x78>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <MRCC_voidSetClkSource+0x78>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6053      	str	r3, [r2, #4]
		break;
 800145e:	bf00      	nop
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <MRCC_voidSetBusesPrescaler>:

void MRCC_voidSetBusesPrescaler(u8 A_u8AHBPrescaler, u8 A_u8APB1Prescaler, u8 A_u8APB2Prescaler)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
	RCC->CFGR &= ~(BUSES_PRESCALER_RESET_MASK << AHB_PRESCALER_FBIT);
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 8001488:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800148c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001490:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8AHBPrescaler << AHB_PRESCALER_FBIT);
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	4611      	mov	r1, r2
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 800149e:	430b      	orrs	r3, r1
 80014a0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB1Prescaler << APB1_PRESCALER_FBIT);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	79ba      	ldrb	r2, [r7, #6]
 80014a8:	0212      	lsls	r2, r2, #8
 80014aa:	4611      	mov	r1, r2
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 80014ae:	430b      	orrs	r3, r1
 80014b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB2Prescaler << APB2_PRESCALER_FBIT);
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	797a      	ldrb	r2, [r7, #5]
 80014b8:	02d2      	lsls	r2, r2, #11
 80014ba:	4611      	mov	r1, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <MRCC_voidSetBusesPrescaler+0x5c>)
 80014be:	430b      	orrs	r3, r1
 80014c0:	6053      	str	r3, [r2, #4]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000

080014d0 <MRCC_voidControlPeripheralsClock>:
void MRCC_voidControlPeripheralsClock(u8 A_u8BusID, u8 A_u8PeripheralID, u8 A_u8Control)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	460b      	mov	r3, r1
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	4613      	mov	r3, r2
 80014e0:	717b      	strb	r3, [r7, #5]
	if(A_u8BusID==APB1)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 81ea 	bne.w	80018be <MRCC_voidControlPeripheralsClock+0x3ee>
	{
		switch(A_u8PeripheralID)
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	2b1d      	cmp	r3, #29
 80014ee:	f200 8334 	bhi.w	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <MRCC_voidControlPeripheralsClock+0x28>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001571 	.word	0x08001571
 80014fc:	0800159b 	.word	0x0800159b
 8001500:	080015c5 	.word	0x080015c5
 8001504:	080015ef 	.word	0x080015ef
 8001508:	08001619 	.word	0x08001619
 800150c:	08001643 	.word	0x08001643
 8001510:	08001b5b 	.word	0x08001b5b
 8001514:	08001b5b 	.word	0x08001b5b
 8001518:	08001b5b 	.word	0x08001b5b
 800151c:	08001b5b 	.word	0x08001b5b
 8001520:	08001b5b 	.word	0x08001b5b
 8001524:	0800166d 	.word	0x0800166d
 8001528:	08001b5b 	.word	0x08001b5b
 800152c:	08001b5b 	.word	0x08001b5b
 8001530:	08001697 	.word	0x08001697
 8001534:	080016c1 	.word	0x080016c1
 8001538:	08001b5b 	.word	0x08001b5b
 800153c:	080016eb 	.word	0x080016eb
 8001540:	08001715 	.word	0x08001715
 8001544:	0800173f 	.word	0x0800173f
 8001548:	08001769 	.word	0x08001769
 800154c:	08001793 	.word	0x08001793
 8001550:	080017bd 	.word	0x080017bd
 8001554:	08001b5b 	.word	0x08001b5b
 8001558:	08001b5b 	.word	0x08001b5b
 800155c:	080017ed 	.word	0x080017ed
 8001560:	08001817 	.word	0x08001817
 8001564:	08001841 	.word	0x08001841
 8001568:	0800186b 	.word	0x0800186b
 800156c:	08001895 	.word	0x08001895
		{
			case TIM2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM2EN_BIT);
 8001570:	797b      	ldrb	r3, [r7, #5]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <MRCC_voidControlPeripheralsClock+0xb4>
 8001576:	4b9c      	ldr	r3, [pc, #624]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a9b      	ldr	r2, [pc, #620]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM2EN_BIT);
			break;
 8001582:	e2ab      	b.n	8001adc <MRCC_voidControlPeripheralsClock+0x60c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM2EN_BIT);
 8001584:	797b      	ldrb	r3, [r7, #5]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 82a8 	bne.w	8001adc <MRCC_voidControlPeripheralsClock+0x60c>
 800158c:	4b96      	ldr	r3, [pc, #600]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a95      	ldr	r2, [pc, #596]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	61d3      	str	r3, [r2, #28]
			break;
 8001598:	e2a0      	b.n	8001adc <MRCC_voidControlPeripheralsClock+0x60c>
			case TIM3:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM3EN_BIT);
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <MRCC_voidControlPeripheralsClock+0xde>
 80015a0:	4b91      	ldr	r3, [pc, #580]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM3EN_BIT);
			break;
 80015ac:	e298      	b.n	8001ae0 <MRCC_voidControlPeripheralsClock+0x610>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM3EN_BIT);
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 8295 	bne.w	8001ae0 <MRCC_voidControlPeripheralsClock+0x610>
 80015b6:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a8b      	ldr	r2, [pc, #556]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015bc:	f023 0302 	bic.w	r3, r3, #2
 80015c0:	61d3      	str	r3, [r2, #28]
			break;
 80015c2:	e28d      	b.n	8001ae0 <MRCC_voidControlPeripheralsClock+0x610>
			case TIM4:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM4EN_BIT);
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <MRCC_voidControlPeripheralsClock+0x108>
 80015ca:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM4EN_BIT);
			break;
 80015d6:	e285      	b.n	8001ae4 <MRCC_voidControlPeripheralsClock+0x614>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM4EN_BIT);
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8282 	bne.w	8001ae4 <MRCC_voidControlPeripheralsClock+0x614>
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	61d3      	str	r3, [r2, #28]
			break;
 80015ec:	e27a      	b.n	8001ae4 <MRCC_voidControlPeripheralsClock+0x614>
			case TIM5:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM5EN_BIT);
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <MRCC_voidControlPeripheralsClock+0x132>
 80015f4:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4a7b      	ldr	r2, [pc, #492]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM5EN_BIT);
			break;
 8001600:	e272      	b.n	8001ae8 <MRCC_voidControlPeripheralsClock+0x618>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM5EN_BIT);
 8001602:	797b      	ldrb	r3, [r7, #5]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 826f 	bne.w	8001ae8 <MRCC_voidControlPeripheralsClock+0x618>
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a76      	ldr	r2, [pc, #472]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001610:	f023 0308 	bic.w	r3, r3, #8
 8001614:	61d3      	str	r3, [r2, #28]
			break;
 8001616:	e267      	b.n	8001ae8 <MRCC_voidControlPeripheralsClock+0x618>
			case TIM6:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM6EN_BIT);
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <MRCC_voidControlPeripheralsClock+0x15c>
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a71      	ldr	r2, [pc, #452]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM6EN_BIT);
			break;
 800162a:	e25f      	b.n	8001aec <MRCC_voidControlPeripheralsClock+0x61c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM6EN_BIT);
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 825c 	bne.w	8001aec <MRCC_voidControlPeripheralsClock+0x61c>
 8001634:	4b6c      	ldr	r3, [pc, #432]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a6b      	ldr	r2, [pc, #428]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800163a:	f023 0310 	bic.w	r3, r3, #16
 800163e:	61d3      	str	r3, [r2, #28]
			break;
 8001640:	e254      	b.n	8001aec <MRCC_voidControlPeripheralsClock+0x61c>
			case TIM7:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,TIM7EN_BIT);
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <MRCC_voidControlPeripheralsClock+0x186>
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4a66      	ldr	r2, [pc, #408]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM7EN_BIT);
			break;
 8001654:	e24c      	b.n	8001af0 <MRCC_voidControlPeripheralsClock+0x620>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,TIM7EN_BIT);
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 8249 	bne.w	8001af0 <MRCC_voidControlPeripheralsClock+0x620>
 800165e:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a61      	ldr	r2, [pc, #388]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001664:	f023 0320 	bic.w	r3, r3, #32
 8001668:	61d3      	str	r3, [r2, #28]
			break;
 800166a:	e241      	b.n	8001af0 <MRCC_voidControlPeripheralsClock+0x620>
			case WWDG:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,WWDGEN_BIT);
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d106      	bne.n	8001680 <MRCC_voidControlPeripheralsClock+0x1b0>
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167c:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,WWDGEN_BIT);
			break;
 800167e:	e239      	b.n	8001af4 <MRCC_voidControlPeripheralsClock+0x624>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,WWDGEN_BIT);
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8236 	bne.w	8001af4 <MRCC_voidControlPeripheralsClock+0x624>
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800168e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001692:	61d3      	str	r3, [r2, #28]
			break;
 8001694:	e22e      	b.n	8001af4 <MRCC_voidControlPeripheralsClock+0x624>
			case SPI2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,SPI2EN_BIT);
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <MRCC_voidControlPeripheralsClock+0x1da>
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,SPI2EN_BIT);
			break;
 80016a8:	e226      	b.n	8001af8 <MRCC_voidControlPeripheralsClock+0x628>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,SPI2EN_BIT);
 80016aa:	797b      	ldrb	r3, [r7, #5]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 8223 	bne.w	8001af8 <MRCC_voidControlPeripheralsClock+0x628>
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016bc:	61d3      	str	r3, [r2, #28]
			break;
 80016be:	e21b      	b.n	8001af8 <MRCC_voidControlPeripheralsClock+0x628>
			case SPI3:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,SPI3EN_BIT);
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <MRCC_voidControlPeripheralsClock+0x204>
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d0:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,SPI3EN_BIT);
			break;
 80016d2:	e213      	b.n	8001afc <MRCC_voidControlPeripheralsClock+0x62c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,SPI3EN_BIT);
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 8210 	bne.w	8001afc <MRCC_voidControlPeripheralsClock+0x62c>
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016e6:	61d3      	str	r3, [r2, #28]
			break;
 80016e8:	e208      	b.n	8001afc <MRCC_voidControlPeripheralsClock+0x62c>
			case USART2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,USART2EN_BIT);
 80016ea:	797b      	ldrb	r3, [r7, #5]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <MRCC_voidControlPeripheralsClock+0x22e>
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fa:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,USART2EN_BIT);
			break;
 80016fc:	e200      	b.n	8001b00 <MRCC_voidControlPeripheralsClock+0x630>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,USART2EN_BIT);
 80016fe:	797b      	ldrb	r3, [r7, #5]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 81fd 	bne.w	8001b00 <MRCC_voidControlPeripheralsClock+0x630>
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800170c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001710:	61d3      	str	r3, [r2, #28]
			break;
 8001712:	e1f5      	b.n	8001b00 <MRCC_voidControlPeripheralsClock+0x630>
			case USART3:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,USART3EN_BIT);
 8001714:	797b      	ldrb	r3, [r7, #5]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <MRCC_voidControlPeripheralsClock+0x258>
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,USART3EN_BIT);
			break;
 8001726:	e1ed      	b.n	8001b04 <MRCC_voidControlPeripheralsClock+0x634>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,USART3EN_BIT);
 8001728:	797b      	ldrb	r3, [r7, #5]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 81ea 	bne.w	8001b04 <MRCC_voidControlPeripheralsClock+0x634>
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173a:	61d3      	str	r3, [r2, #28]
			break;
 800173c:	e1e2      	b.n	8001b04 <MRCC_voidControlPeripheralsClock+0x634>
			case USART4:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,UART4EN_BIT);
 800173e:	797b      	ldrb	r3, [r7, #5]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <MRCC_voidControlPeripheralsClock+0x282>
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800174a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800174e:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,UART4EN_BIT);
			break;
 8001750:	e1da      	b.n	8001b08 <MRCC_voidControlPeripheralsClock+0x638>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,UART4EN_BIT);
 8001752:	797b      	ldrb	r3, [r7, #5]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 81d7 	bne.w	8001b08 <MRCC_voidControlPeripheralsClock+0x638>
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001760:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001764:	61d3      	str	r3, [r2, #28]
			break;
 8001766:	e1cf      	b.n	8001b08 <MRCC_voidControlPeripheralsClock+0x638>
			case USART5:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,UART5EN_BIT);
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d106      	bne.n	800177c <MRCC_voidControlPeripheralsClock+0x2ac>
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001778:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,UART5EN_BIT);
			break;
 800177a:	e1c7      	b.n	8001b0c <MRCC_voidControlPeripheralsClock+0x63c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,UART5EN_BIT);
 800177c:	797b      	ldrb	r3, [r7, #5]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 81c4 	bne.w	8001b0c <MRCC_voidControlPeripheralsClock+0x63c>
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800178a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800178e:	61d3      	str	r3, [r2, #28]
			break;
 8001790:	e1bc      	b.n	8001b0c <MRCC_voidControlPeripheralsClock+0x63c>
			case I2C1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,I2C1EN_BIT);
 8001792:	797b      	ldrb	r3, [r7, #5]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <MRCC_voidControlPeripheralsClock+0x2d6>
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,I2C1EN_BIT);
			break;
 80017a4:	e1b4      	b.n	8001b10 <MRCC_voidControlPeripheralsClock+0x640>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,I2C1EN_BIT);
 80017a6:	797b      	ldrb	r3, [r7, #5]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 81b1 	bne.w	8001b10 <MRCC_voidControlPeripheralsClock+0x640>
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017b8:	61d3      	str	r3, [r2, #28]
			break;
 80017ba:	e1a9      	b.n	8001b10 <MRCC_voidControlPeripheralsClock+0x640>
			case I2C2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,I2C2EN_BIT);
 80017bc:	797b      	ldrb	r3, [r7, #5]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d106      	bne.n	80017d0 <MRCC_voidControlPeripheralsClock+0x300>
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017cc:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,I2C2EN_BIT);
			break;
 80017ce:	e1a1      	b.n	8001b14 <MRCC_voidControlPeripheralsClock+0x644>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,I2C2EN_BIT);
 80017d0:	797b      	ldrb	r3, [r7, #5]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 819e 	bne.w	8001b14 <MRCC_voidControlPeripheralsClock+0x644>
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <MRCC_voidControlPeripheralsClock+0x318>)
 80017de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017e2:	61d3      	str	r3, [r2, #28]
			break;
 80017e4:	e196      	b.n	8001b14 <MRCC_voidControlPeripheralsClock+0x644>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
			case CAN1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,CAN1EN_BIT);
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d106      	bne.n	8001800 <MRCC_voidControlPeripheralsClock+0x330>
 80017f2:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80017f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fc:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,CAN1EN_BIT);
			break;
 80017fe:	e18b      	b.n	8001b18 <MRCC_voidControlPeripheralsClock+0x648>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,CAN1EN_BIT);
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8188 	bne.w	8001b18 <MRCC_voidControlPeripheralsClock+0x648>
 8001808:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a99      	ldr	r2, [pc, #612]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800180e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001812:	61d3      	str	r3, [r2, #28]
			break;
 8001814:	e180      	b.n	8001b18 <MRCC_voidControlPeripheralsClock+0x648>
			case CAN2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,CAN2EN_BIT);
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <MRCC_voidControlPeripheralsClock+0x35a>
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	4a94      	ldr	r2, [pc, #592]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001826:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,CAN2EN_BIT);
			break;
 8001828:	e178      	b.n	8001b1c <MRCC_voidControlPeripheralsClock+0x64c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,CAN2EN_BIT);
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 8175 	bne.w	8001b1c <MRCC_voidControlPeripheralsClock+0x64c>
 8001832:	4b90      	ldr	r3, [pc, #576]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a8f      	ldr	r2, [pc, #572]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800183c:	61d3      	str	r3, [r2, #28]
			break;
 800183e:	e16d      	b.n	8001b1c <MRCC_voidControlPeripheralsClock+0x64c>
			case BKP:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,BKPEN_BIT);
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <MRCC_voidControlPeripheralsClock+0x384>
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a8a      	ldr	r2, [pc, #552]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800184c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001850:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,BKPEN_BIT);
			break;
 8001852:	e165      	b.n	8001b20 <MRCC_voidControlPeripheralsClock+0x650>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,BKPEN_BIT);
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8162 	bne.w	8001b20 <MRCC_voidControlPeripheralsClock+0x650>
 800185c:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a84      	ldr	r2, [pc, #528]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001862:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001866:	61d3      	str	r3, [r2, #28]
			break;
 8001868:	e15a      	b.n	8001b20 <MRCC_voidControlPeripheralsClock+0x650>
			case PWR:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,PWREN_BIT);
 800186a:	797b      	ldrb	r3, [r7, #5]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <MRCC_voidControlPeripheralsClock+0x3ae>
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,PWREN_BIT);
			break;
 800187c:	e152      	b.n	8001b24 <MRCC_voidControlPeripheralsClock+0x654>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,PWREN_BIT);
 800187e:	797b      	ldrb	r3, [r7, #5]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 814f 	bne.w	8001b24 <MRCC_voidControlPeripheralsClock+0x654>
 8001886:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
			break;
 8001892:	e147      	b.n	8001b24 <MRCC_voidControlPeripheralsClock+0x654>
			case DAC:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB1ENR,DACEN_BIT);
 8001894:	797b      	ldrb	r3, [r7, #5]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d106      	bne.n	80018a8 <MRCC_voidControlPeripheralsClock+0x3d8>
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80018a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018a4:	61d3      	str	r3, [r2, #28]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,DACEN_BIT);
			break;
 80018a6:	e13f      	b.n	8001b28 <MRCC_voidControlPeripheralsClock+0x658>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB1ENR,DACEN_BIT);
 80018a8:	797b      	ldrb	r3, [r7, #5]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 813c 	bne.w	8001b28 <MRCC_voidControlPeripheralsClock+0x658>
 80018b0:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	4a6f      	ldr	r2, [pc, #444]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80018b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80018ba:	61d3      	str	r3, [r2, #28]
			break;
 80018bc:	e134      	b.n	8001b28 <MRCC_voidControlPeripheralsClock+0x658>
		}
	}
	else if(A_u8BusID==APB2)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	f040 8133 	bne.w	8001b2c <MRCC_voidControlPeripheralsClock+0x65c>
	{
		switch(A_u8PeripheralID)
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	2b0e      	cmp	r3, #14
 80018ca:	f200 8146 	bhi.w	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <MRCC_voidControlPeripheralsClock+0x404>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	08001911 	.word	0x08001911
 80018d8:	08001b5b 	.word	0x08001b5b
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	08001965 	.word	0x08001965
 80018e4:	0800198f 	.word	0x0800198f
 80018e8:	080019b9 	.word	0x080019b9
 80018ec:	080019e3 	.word	0x080019e3
 80018f0:	08001b5b 	.word	0x08001b5b
 80018f4:	08001b5b 	.word	0x08001b5b
 80018f8:	08001a0d 	.word	0x08001a0d
 80018fc:	08001a37 	.word	0x08001a37
 8001900:	08001a5f 	.word	0x08001a5f
 8001904:	08001a8d 	.word	0x08001a8d
 8001908:	08001b5b 	.word	0x08001b5b
 800190c:	08001ab5 	.word	0x08001ab5
		{
			case AFIO:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,AFIOEN_BIT);
 8001910:	797b      	ldrb	r3, [r7, #5]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d106      	bne.n	8001924 <MRCC_voidControlPeripheralsClock+0x454>
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,AFIOEN_BIT);
			break;
 8001922:	e105      	b.n	8001b30 <MRCC_voidControlPeripheralsClock+0x660>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,AFIOEN_BIT);
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8102 	bne.w	8001b30 <MRCC_voidControlPeripheralsClock+0x660>
 800192c:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
			break;
 8001938:	e0fa      	b.n	8001b30 <MRCC_voidControlPeripheralsClock+0x660>
			case IOPA:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,IOPAEN_BIT);
 800193a:	797b      	ldrb	r3, [r7, #5]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <MRCC_voidControlPeripheralsClock+0x47e>
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPAEN_BIT);
			break;
 800194c:	e0f2      	b.n	8001b34 <MRCC_voidControlPeripheralsClock+0x664>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPAEN_BIT);
 800194e:	797b      	ldrb	r3, [r7, #5]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80ef 	bne.w	8001b34 <MRCC_voidControlPeripheralsClock+0x664>
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6193      	str	r3, [r2, #24]
			break;
 8001962:	e0e7      	b.n	8001b34 <MRCC_voidControlPeripheralsClock+0x664>
			case IOPB:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,IOPBEN_BIT);
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <MRCC_voidControlPeripheralsClock+0x4a8>
 800196a:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a41      	ldr	r2, [pc, #260]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPBEN_BIT);
			break;
 8001976:	e0df      	b.n	8001b38 <MRCC_voidControlPeripheralsClock+0x668>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPBEN_BIT);
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 80dc 	bne.w	8001b38 <MRCC_voidControlPeripheralsClock+0x668>
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001986:	f023 0308 	bic.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
			break;
 800198c:	e0d4      	b.n	8001b38 <MRCC_voidControlPeripheralsClock+0x668>
			case IOPC:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,IOPCEN_BIT);
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <MRCC_voidControlPeripheralsClock+0x4d2>
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a36      	ldr	r2, [pc, #216]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPCEN_BIT);
			break;
 80019a0:	e0cc      	b.n	8001b3c <MRCC_voidControlPeripheralsClock+0x66c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPCEN_BIT);
 80019a2:	797b      	ldrb	r3, [r7, #5]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80c9 	bne.w	8001b3c <MRCC_voidControlPeripheralsClock+0x66c>
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019b0:	f023 0310 	bic.w	r3, r3, #16
 80019b4:	6193      	str	r3, [r2, #24]
			break;
 80019b6:	e0c1      	b.n	8001b3c <MRCC_voidControlPeripheralsClock+0x66c>
			case IOPD:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,IOPDEN_BIT);
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <MRCC_voidControlPeripheralsClock+0x4fc>
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPDEN_BIT);
			break;
 80019ca:	e0b9      	b.n	8001b40 <MRCC_voidControlPeripheralsClock+0x670>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPDEN_BIT);
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80b6 	bne.w	8001b40 <MRCC_voidControlPeripheralsClock+0x670>
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019da:	f023 0320 	bic.w	r3, r3, #32
 80019de:	6193      	str	r3, [r2, #24]
			break;
 80019e0:	e0ae      	b.n	8001b40 <MRCC_voidControlPeripheralsClock+0x670>
			case IOPE:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,IOPEEN_BIT);
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <MRCC_voidControlPeripheralsClock+0x526>
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 80019ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f2:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPEEN_BIT);
			break;
 80019f4:	e0a6      	b.n	8001b44 <MRCC_voidControlPeripheralsClock+0x674>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,IOPEEN_BIT);
 80019f6:	797b      	ldrb	r3, [r7, #5]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 80a3 	bne.w	8001b44 <MRCC_voidControlPeripheralsClock+0x674>
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a08:	6193      	str	r3, [r2, #24]
			break;
 8001a0a:	e09b      	b.n	8001b44 <MRCC_voidControlPeripheralsClock+0x674>
			case ADC1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,ADC1EN_BIT);
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d106      	bne.n	8001a20 <MRCC_voidControlPeripheralsClock+0x550>
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1c:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,ADC1EN_BIT);
			break;
 8001a1e:	e093      	b.n	8001b48 <MRCC_voidControlPeripheralsClock+0x678>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,ADC1EN_BIT);
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8090 	bne.w	8001b48 <MRCC_voidControlPeripheralsClock+0x678>
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a32:	6193      	str	r3, [r2, #24]
			break;
 8001a34:	e088      	b.n	8001b48 <MRCC_voidControlPeripheralsClock+0x678>
			case ADC2:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,ADC2EN_BIT);
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d106      	bne.n	8001a4a <MRCC_voidControlPeripheralsClock+0x57a>
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a46:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,ADC2EN_BIT);
			break;
 8001a48:	e080      	b.n	8001b4c <MRCC_voidControlPeripheralsClock+0x67c>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,ADC2EN_BIT);
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d17d      	bne.n	8001b4c <MRCC_voidControlPeripheralsClock+0x67c>
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a5a:	6193      	str	r3, [r2, #24]
			break;
 8001a5c:	e076      	b.n	8001b4c <MRCC_voidControlPeripheralsClock+0x67c>
			case TIM1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,TIM1EN_BIT);
 8001a5e:	797b      	ldrb	r3, [r7, #5]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d109      	bne.n	8001a78 <MRCC_voidControlPeripheralsClock+0x5a8>
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a02      	ldr	r2, [pc, #8]	; (8001a74 <MRCC_voidControlPeripheralsClock+0x5a4>)
 8001a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6e:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,TIM1EN_BIT);
			break;
 8001a70:	e06e      	b.n	8001b50 <MRCC_voidControlPeripheralsClock+0x680>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,TIM1EN_BIT);
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d168      	bne.n	8001b50 <MRCC_voidControlPeripheralsClock+0x680>
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a88:	6193      	str	r3, [r2, #24]
			break;
 8001a8a:	e061      	b.n	8001b50 <MRCC_voidControlPeripheralsClock+0x680>
			case SPI1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,SPI1EN_BIT);
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <MRCC_voidControlPeripheralsClock+0x5d0>
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9c:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,SPI1EN_BIT);
			break;
 8001a9e:	e059      	b.n	8001b54 <MRCC_voidControlPeripheralsClock+0x684>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,SPI1EN_BIT);
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d156      	bne.n	8001b54 <MRCC_voidControlPeripheralsClock+0x684>
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab0:	6193      	str	r3, [r2, #24]
			break;
 8001ab2:	e04f      	b.n	8001b54 <MRCC_voidControlPeripheralsClock+0x684>
			case USART1:
				if(A_u8Control==ENABLE_PERIPHERAL)			SET_BIT(RCC->APB2ENR,USART1EN_BIT);
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d106      	bne.n	8001ac8 <MRCC_voidControlPeripheralsClock+0x5f8>
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6193      	str	r3, [r2, #24]
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,USART1EN_BIT);
			break;
 8001ac6:	e047      	b.n	8001b58 <MRCC_voidControlPeripheralsClock+0x688>
				else if(A_u8Control==DISABLE_PERIPHERAL)	CLR_BIT(RCC->APB2ENR,USART1EN_BIT);
 8001ac8:	797b      	ldrb	r3, [r7, #5]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d144      	bne.n	8001b58 <MRCC_voidControlPeripheralsClock+0x688>
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <MRCC_voidControlPeripheralsClock+0x694>)
 8001ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad8:	6193      	str	r3, [r2, #24]
			break;
 8001ada:	e03d      	b.n	8001b58 <MRCC_voidControlPeripheralsClock+0x688>
			break;
 8001adc:	bf00      	nop
 8001ade:	e03c      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001ae0:	bf00      	nop
 8001ae2:	e03a      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001ae4:	bf00      	nop
 8001ae6:	e038      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001ae8:	bf00      	nop
 8001aea:	e036      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001aec:	bf00      	nop
 8001aee:	e034      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001af0:	bf00      	nop
 8001af2:	e032      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001af4:	bf00      	nop
 8001af6:	e030      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001af8:	bf00      	nop
 8001afa:	e02e      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001afc:	bf00      	nop
 8001afe:	e02c      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b00:	bf00      	nop
 8001b02:	e02a      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b04:	bf00      	nop
 8001b06:	e028      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b08:	bf00      	nop
 8001b0a:	e026      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b0c:	bf00      	nop
 8001b0e:	e024      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b10:	bf00      	nop
 8001b12:	e022      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b14:	bf00      	nop
 8001b16:	e020      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b18:	bf00      	nop
 8001b1a:	e01e      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b1c:	bf00      	nop
 8001b1e:	e01c      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b20:	bf00      	nop
 8001b22:	e01a      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b24:	bf00      	nop
 8001b26:	e018      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b28:	bf00      	nop
 8001b2a:	e016      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
		}
	}
 8001b2c:	bf00      	nop
 8001b2e:	e014      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b30:	bf00      	nop
 8001b32:	e012      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b34:	bf00      	nop
 8001b36:	e010      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b38:	bf00      	nop
 8001b3a:	e00e      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b3c:	bf00      	nop
 8001b3e:	e00c      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b40:	bf00      	nop
 8001b42:	e00a      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b44:	bf00      	nop
 8001b46:	e008      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b48:	bf00      	nop
 8001b4a:	e006      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b4c:	bf00      	nop
 8001b4e:	e004      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <MRCC_voidControlPeripheralsClock+0x68a>
			break;
 8001b58:	bf00      	nop
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <MSTK_voidInit>:

static void (* SysTick_CallBack)(void)=NULL;
static u8 MSTK_u8ModeOfInterval = MSTK_SINGLE_INTERVAL;

void MSTK_voidInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
#if MSTK_CLOCK_SOURCE == MSTK_SRC_AHB
STK->CTRL = 0x00000004;
#elif MSTK_CLOCK_SOURCE == MSTK_SRC_AHB_8
STK->CTRL = 0x00000000;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <MSTK_voidInit+0x14>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
#else
#error "Wrong Clock Source Prescaler"
#endif
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <MSTK_voidSetBusyWait>:
void MSTK_voidSetBusyWait(u32 copy_u32Ticks) //delay
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	/*load ticks to load register*/
	STK->LOAD = copy_u32Ticks;
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6053      	str	r3, [r2, #4]
	/*Start Timer*/
	SET_BIT(STK->CTRL,0);
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
	/*wait till flag is raised*/
	while((GET_BIT(STK->CTRL,16))==0)
 8001b9a:	e000      	b.n	8001b9e <MSTK_voidSetBusyWait+0x1e>
	{
		asm("NOP");
 8001b9c:	bf00      	nop
	while((GET_BIT(STK->CTRL,16))==0)
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f7      	beq.n	8001b9c <MSTK_voidSetBusyWait+0x1c>
	}
	/*stop timer*/
	CLR_BIT(STK->CTRL,0);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
	/*Re initialization of LOAD and VAL*/
	STK->LOAD=0;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
	STK->VAL=0;
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <MSTK_voidSetBusyWait+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <SysTick_Handler>:
	u32 Local_u32RemainingTime;
	Local_u32RemainingTime = (STK->VAL);
	return Local_u32RemainingTime;
}
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	//u8 Local_u8Temp;
	/*if single*/
	if(MSTK_u8ModeOfInterval==MSTK_SINGLE_INTERVAL)
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <SysTick_Handler+0x3c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d111      	bne.n	8001c04 <SysTick_Handler+0x30>
	{
		/*disable interrupt*/
		CLR_BIT(STK->CTRL,1);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <SysTick_Handler+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <SysTick_Handler+0x40>)
 8001be6:	f023 0302 	bic.w	r3, r3, #2
 8001bea:	6013      	str	r3, [r2, #0]
		/*stop timer*/
		CLR_BIT(STK->CTRL,0);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <SysTick_Handler+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <SysTick_Handler+0x40>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]
		/*Re initialization of LOAD and VAL*/
		STK->LOAD=0;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <SysTick_Handler+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Handler+0x40>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
	}
	/*call back*/
	SysTick_CallBack();
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Handler+0x44>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4798      	blx	r3
	/*clear interrupt flag by reading it*/
	//Local_u8Temp=(GET_BIT(STK->CTRL,16));
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000034 	.word	0x20000034
 8001c14:	e000e010 	.word	0xe000e010
 8001c18:	20000030 	.word	0x20000030
 8001c1c:	00000000 	.word	0x00000000

08001c20 <MUART_voidInit>:
static void (* UART2_CallBack)(void)=NULL;
static void (* UART3_CallBack)(void)=NULL;


void MUART_voidInit(UART_Config_t *copy_UARTNum)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	f32 USARTDIVFactor=(FCLK/(16.0*(copy_UARTNum->UART_BaudRate)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc85 	bl	800053c <__aeabi_ui2d>
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MUART_voidInit+0x90>)
 8001c38:	f7fe fcfa 	bl	8000630 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	a119      	add	r1, pc, #100	; (adr r1, 8001ca8 <MUART_voidInit+0x88>)
 8001c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c46:	f7fe fe1d 	bl	8000884 <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe feff 	bl	8000a54 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60bb      	str	r3, [r7, #8]
	u8 Mantissa = (u8) USARTDIVFactor;
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	f7ff f8ce 	bl	8000dfc <__aeabi_f2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
	u8 DIV_Fraction = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73bb      	strb	r3, [r7, #14]
	USARTDIVFactor-=Mantissa;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fffc 	bl	8000c68 <__aeabi_i2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4619      	mov	r1, r3
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f7fe ff41 	bl	8000afc <__aeabi_fsub>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60bb      	str	r3, [r7, #8]
	USARTDIVFactor*=16;
 8001c7e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f7fe fa64 	bl	8000150 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60bb      	str	r3, [r7, #8]
	if(USARTDIVFactor>15)
 8001c8c:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <MUART_voidInit+0x94>)
 8001c8e:	68b8      	ldr	r0, [r7, #8]
 8001c90:	f7ff f8aa 	bl	8000de8 <__aeabi_fcmpgt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00e      	beq.n	8001cb8 <MUART_voidInit+0x98>
	{
		DIV_Fraction=0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73bb      	strb	r3, [r7, #14]
		Mantissa++;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e00d      	b.n	8001cc2 <MUART_voidInit+0xa2>
 8001ca6:	bf00      	nop
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	415e8480 	.word	0x415e8480
 8001cb0:	40300000 	.word	0x40300000
 8001cb4:	41700000 	.word	0x41700000
	}
	else
	{
		DIV_Fraction = (u8) USARTDIVFactor;
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f7ff f89f 	bl	8000dfc <__aeabi_f2uiz>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73bb      	strb	r3, [r7, #14]
	}
	/*Baudrate*/
	UART[copy_UARTNum->UART_NUM]->BRR=0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4ba1      	ldr	r3, [pc, #644]	; (8001f50 <MUART_voidInit+0x330>)
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
	UART[copy_UARTNum->UART_NUM]->BRR|=DIV_Fraction;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b9d      	ldr	r3, [pc, #628]	; (8001f50 <MUART_voidInit+0x330>)
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	7bba      	ldrb	r2, [r7, #14]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <MUART_voidInit+0x330>)
 8001cea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
	UART[copy_UARTNum->UART_NUM]->BRR|=(Mantissa<<4);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b95      	ldr	r3, [pc, #596]	; (8001f50 <MUART_voidInit+0x330>)
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <MUART_voidInit+0x330>)
 8001d0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
	/*Configuration*/
	UART[copy_UARTNum->UART_NUM]->CR[0]=0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <MUART_voidInit+0x330>)
 8001d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=(copy_UARTNum->UART_SBK);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <MUART_voidInit+0x330>)
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b9b      	ldrb	r3, [r3, #14]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <MUART_voidInit+0x330>)
 8001d42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_RWU)<<1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <MUART_voidInit+0x330>)
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7b5b      	ldrb	r3, [r3, #13]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4619      	mov	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <MUART_voidInit+0x330>)
 8001d68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_RE)<<2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <MUART_voidInit+0x330>)
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7b1b      	ldrb	r3, [r3, #12]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4619      	mov	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <MUART_voidInit+0x330>)
 8001d8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_TE)<<3);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <MUART_voidInit+0x330>)
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7adb      	ldrb	r3, [r3, #11]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4619      	mov	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <MUART_voidInit+0x330>)
 8001db4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_IDLEIE)<<4);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <MUART_voidInit+0x330>)
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a9b      	ldrb	r3, [r3, #10]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <MUART_voidInit+0x330>)
 8001dda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_RXNEIE)<<5);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <MUART_voidInit+0x330>)
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7a5b      	ldrb	r3, [r3, #9]
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	4619      	mov	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <MUART_voidInit+0x330>)
 8001e00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_TCIE)<<6);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <MUART_voidInit+0x330>)
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <MUART_voidInit+0x330>)
 8001e26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_TXEIE)<<7);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <MUART_voidInit+0x330>)
 8001e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	79db      	ldrb	r3, [r3, #7]
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	4619      	mov	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <MUART_voidInit+0x330>)
 8001e4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_PEIE)<<8);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <MUART_voidInit+0x330>)
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	799b      	ldrb	r3, [r3, #6]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <MUART_voidInit+0x330>)
 8001e72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_PARITY_SELECTION)<<9);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <MUART_voidInit+0x330>)
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	4619      	mov	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <MUART_voidInit+0x330>)
 8001e98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_PARITY_CONTROL_ENABLE)<<10);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <MUART_voidInit+0x330>)
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <MUART_voidInit+0x330>)
 8001ebe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_WAKEUP)<<11);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <MUART_voidInit+0x330>)
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	02db      	lsls	r3, r3, #11
 8001eda:	4619      	mov	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MUART_voidInit+0x330>)
 8001ee4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_WORD_LENGTH)<<12);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MUART_voidInit+0x330>)
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	789b      	ldrb	r3, [r3, #2]
 8001efe:	031b      	lsls	r3, r3, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MUART_voidInit+0x330>)
 8001f0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
	UART[copy_UARTNum->UART_NUM]->CR[0]|=((copy_UARTNum->UART_ENABLE_STATE)<<13);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MUART_voidInit+0x330>)
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	035b      	lsls	r3, r3, #13
 8001f26:	4619      	mov	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MUART_voidInit+0x330>)
 8001f30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]
	/*Clear status reg*/
	UART[copy_UARTNum->UART_NUM]->SR=0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <MUART_voidInit+0x330>)
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000000 	.word	0x20000000

08001f54 <MUART_voidTransmitSync>:
	UART[copy_UARTNum->UART_NUM]->DR=data;
	while(GET_BIT(UART[copy_UARTNum->UART_NUM]->SR,6)==0);
}

void MUART_voidTransmitSync(UART_Config_t *copy_UARTNum, u8 arr[])
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
	u8 i = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
	while(arr[i]!='\0')
 8001f62:	e01a      	b.n	8001f9a <MUART_voidTransmitSync+0x46>
	{
		UART[copy_UARTNum->UART_NUM]->DR=arr[i];
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MUART_voidTransmitSync+0x60>)
 8001f74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f78:	605a      	str	r2, [r3, #4]
		while(GET_BIT(UART[copy_UARTNum->UART_NUM]->SR,6)==0);
 8001f7a:	bf00      	nop
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MUART_voidTransmitSync+0x60>)
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f3      	beq.n	8001f7c <MUART_voidTransmitSync+0x28>
		i++;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
	while(arr[i]!='\0')
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1de      	bne.n	8001f64 <MUART_voidTransmitSync+0x10>
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <USART1_IRQHandler>:
	{
		UART1_CallBack  = 	ptr ;
	}
}
void USART1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	UART1_CallBack();
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <USART1_IRQHandler+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4798      	blx	r3
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000038 	.word	0x20000038

08001fcc <MUART2_voidSetCallBack>:
void MUART2_voidSetCallBack	(void (*ptr) (void))
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if(ptr != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <MUART2_voidSetCallBack+0x14>
	{
		UART2_CallBack  = 	ptr ;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <MUART2_voidSetCallBack+0x20>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2000003c 	.word	0x2000003c

08001ff0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	UART2_CallBack();
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <USART2_IRQHandler+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4798      	blx	r3
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000003c 	.word	0x2000003c

08002004 <MUART3_voidSetCallBack>:
void MUART3_voidSetCallBack	(void (*ptr) (void))
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if(ptr != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <MUART3_voidSetCallBack+0x14>
	{
		UART3_CallBack  = 	ptr ;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <MUART3_voidSetCallBack+0x20>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]
	}
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000040 	.word	0x20000040

08002028 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	UART3_CallBack();
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <USART3_IRQHandler+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4798      	blx	r3
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000040 	.word	0x20000040

0800203c <MUART2_u8ReadDR>:
u8 MUART1_u8ReadDR()
{
	return UART[0]->DR;
}
u8 MUART2_u8ReadDR()
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	return UART[1]->DR;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <MUART2_u8ReadDR+0x14>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	b2db      	uxtb	r3, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000000 	.word	0x20000000

08002054 <MUART3_u8ReadDR>:
u8 MUART3_u8ReadDR()
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	return UART[2]->DR;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <MUART3_u8ReadDR+0x14>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	b2db      	uxtb	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000000 	.word	0x20000000

0800206c <main>:
void Init();
void GetDateFromRaspberryPi();
void GetDateFromDebug();

int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	Init();
 8002070:	f000 f8b2 	bl	80021d8 <Init>
	while(1)
	{
		if(MDIO_u8GetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN11)==0)
 8002074:	210b      	movs	r1, #11
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff f838 	bl	80010ec <MDIO_u8GetPinValue>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <main+0x20>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "NONE\r\n");
 8002082:	4920      	ldr	r1, [pc, #128]	; (8002104 <main+0x98>)
 8002084:	4820      	ldr	r0, [pc, #128]	; (8002108 <main+0x9c>)
 8002086:	f7ff ff65 	bl	8001f54 <MUART_voidTransmitSync>
 800208a:	e7f3      	b.n	8002074 <main+0x8>
		}
		else if(MDIO_u8GetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN12)==0)
 800208c:	210c      	movs	r1, #12
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff f82c 	bl	80010ec <MDIO_u8GetPinValue>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <main+0x38>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "JOYSTICK\r\n");
 800209a:	491c      	ldr	r1, [pc, #112]	; (800210c <main+0xa0>)
 800209c:	481a      	ldr	r0, [pc, #104]	; (8002108 <main+0x9c>)
 800209e:	f7ff ff59 	bl	8001f54 <MUART_voidTransmitSync>
 80020a2:	e7e7      	b.n	8002074 <main+0x8>
		}
		else if(MDIO_u8GetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN15)==0)
 80020a4:	210f      	movs	r1, #15
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff f820 	bl	80010ec <MDIO_u8GetPinValue>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <main+0x50>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "EYE\r\n");
 80020b2:	4917      	ldr	r1, [pc, #92]	; (8002110 <main+0xa4>)
 80020b4:	4814      	ldr	r0, [pc, #80]	; (8002108 <main+0x9c>)
 80020b6:	f7ff ff4d 	bl	8001f54 <MUART_voidTransmitSync>
 80020ba:	e7db      	b.n	8002074 <main+0x8>
		}
		else if(MDIO_u8GetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN4)==0)
 80020bc:	2104      	movs	r1, #4
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff f814 	bl	80010ec <MDIO_u8GetPinValue>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <main+0x68>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "REMOTE\r\n");
 80020ca:	4912      	ldr	r1, [pc, #72]	; (8002114 <main+0xa8>)
 80020cc:	480e      	ldr	r0, [pc, #56]	; (8002108 <main+0x9c>)
 80020ce:	f7ff ff41 	bl	8001f54 <MUART_voidTransmitSync>
 80020d2:	e7cf      	b.n	8002074 <main+0x8>
		}
		else if(MDIO_u8GetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN5)==0)
 80020d4:	2105      	movs	r1, #5
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff f808 	bl	80010ec <MDIO_u8GetPinValue>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <main+0x80>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "NONE\r\n");
 80020e2:	4908      	ldr	r1, [pc, #32]	; (8002104 <main+0x98>)
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <main+0x9c>)
 80020e6:	f7ff ff35 	bl	8001f54 <MUART_voidTransmitSync>
 80020ea:	e7c3      	b.n	8002074 <main+0x8>
		}
		else if(MDIO_u8GetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN3)==0)
 80020ec:	2103      	movs	r1, #3
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe fffc 	bl	80010ec <MDIO_u8GetPinValue>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1bc      	bne.n	8002074 <main+0x8>
		{
			MUART_voidTransmitSync(&Debug, (u8* ) "VOICE\r\n");
 80020fa:	4907      	ldr	r1, [pc, #28]	; (8002118 <main+0xac>)
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <main+0x9c>)
 80020fe:	f7ff ff29 	bl	8001f54 <MUART_voidTransmitSync>
		if(MDIO_u8GetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN11)==0)
 8002102:	e7b7      	b.n	8002074 <main+0x8>
 8002104:	08002554 	.word	0x08002554
 8002108:	20000094 	.word	0x20000094
 800210c:	0800255c 	.word	0x0800255c
 8002110:	08002568 	.word	0x08002568
 8002114:	08002570 	.word	0x08002570
 8002118:	0800257c 	.word	0x0800257c

0800211c <GetDateFromRaspberryPi>:
		GetTamperature();
		*/
	}
}
void GetDateFromRaspberryPi()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	static u8 counter = 0;
	u8 temp = MUART2_u8ReadDR();
 8002122:	f7ff ff8b 	bl	800203c <MUART2_u8ReadDR>
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	if(temp!='\n')
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b0a      	cmp	r3, #10
 800212e:	d00f      	beq.n	8002150 <GetDateFromRaspberryPi+0x34>
	{
		if(temp!='\r')
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b0d      	cmp	r3, #13
 8002134:	d018      	beq.n	8002168 <GetDateFromRaspberryPi+0x4c>
		{
			Command_Raspberry[counter]=temp;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <GetDateFromRaspberryPi+0x54>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <GetDateFromRaspberryPi+0x58>)
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	5453      	strb	r3, [r2, r1]
			counter++;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <GetDateFromRaspberryPi+0x54>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <GetDateFromRaspberryPi+0x54>)
 800214c:	701a      	strb	r2, [r3, #0]
	{
		Raspberry_command_flag = 1;
		Command_Raspberry[counter]='\0';
		counter = 0;
	}
}
 800214e:	e00b      	b.n	8002168 <GetDateFromRaspberryPi+0x4c>
		Raspberry_command_flag = 1;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <GetDateFromRaspberryPi+0x5c>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
		Command_Raspberry[counter]='\0';
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <GetDateFromRaspberryPi+0x54>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <GetDateFromRaspberryPi+0x58>)
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]
		counter = 0;
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <GetDateFromRaspberryPi+0x54>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000046 	.word	0x20000046
 8002174:	20000060 	.word	0x20000060
 8002178:	20000044 	.word	0x20000044

0800217c <GetDateFromDebug>:
void GetDateFromDebug()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	static u8 counter = 0;
	u8 temp = MUART3_u8ReadDR();
 8002182:	f7ff ff67 	bl	8002054 <MUART3_u8ReadDR>
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
	if(temp!='\n')
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b0a      	cmp	r3, #10
 800218e:	d00c      	beq.n	80021aa <GetDateFromDebug+0x2e>
	{
		Command_Debug[counter]=temp;
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <GetDateFromDebug+0x50>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <GetDateFromDebug+0x54>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	5453      	strb	r3, [r2, r1]
		counter++;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <GetDateFromDebug+0x50>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <GetDateFromDebug+0x50>)
 80021a6:	701a      	strb	r2, [r3, #0]
	{
		Debug_command_flag = 1;
		Command_Debug[counter]='\0';
		counter = 0;
	}
}
 80021a8:	e00b      	b.n	80021c2 <GetDateFromDebug+0x46>
		Debug_command_flag = 1;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <GetDateFromDebug+0x58>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
		Command_Debug[counter]='\0';
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <GetDateFromDebug+0x50>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <GetDateFromDebug+0x54>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]
		counter = 0;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <GetDateFromDebug+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000047 	.word	0x20000047
 80021d0:	20000048 	.word	0x20000048
 80021d4:	20000045 	.word	0x20000045

080021d8 <Init>:
void Init()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	Debug.UART_NUM=UART1;
 80021dc:	4b9a      	ldr	r3, [pc, #616]	; (8002448 <Init+0x270>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
	Debug.UART_ENABLE_STATE=UART_ENABLE;
 80021e2:	4b99      	ldr	r3, [pc, #612]	; (8002448 <Init+0x270>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	705a      	strb	r2, [r3, #1]
	Debug.UART_WORD_LENGTH=UART_EIGHT_BITS;
 80021e8:	4b97      	ldr	r3, [pc, #604]	; (8002448 <Init+0x270>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	709a      	strb	r2, [r3, #2]
	Debug.UART_WAKEUP=UART_IDLE_LINE;
 80021ee:	4b96      	ldr	r3, [pc, #600]	; (8002448 <Init+0x270>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	70da      	strb	r2, [r3, #3]
	Debug.UART_PARITY_CONTROL_ENABLE=UART_PARITY_DISABLED;
 80021f4:	4b94      	ldr	r3, [pc, #592]	; (8002448 <Init+0x270>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	711a      	strb	r2, [r3, #4]
	Debug.UART_PARITY_SELECTION=UART_EVEN_PARITY;
 80021fa:	4b93      	ldr	r3, [pc, #588]	; (8002448 <Init+0x270>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	715a      	strb	r2, [r3, #5]
	Debug.UART_PEIE=UART_INTERRUPT_IS_INHIBITED_PE;
 8002200:	4b91      	ldr	r3, [pc, #580]	; (8002448 <Init+0x270>)
 8002202:	2200      	movs	r2, #0
 8002204:	719a      	strb	r2, [r3, #6]
	Debug.UART_TXEIE=UART_INTERRUPT_IS_INHIBITED_TXE;
 8002206:	4b90      	ldr	r3, [pc, #576]	; (8002448 <Init+0x270>)
 8002208:	2200      	movs	r2, #0
 800220a:	71da      	strb	r2, [r3, #7]
	Debug.UART_TCIE=UART_INTERRUPT_IS_INHIBITED_TC;
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <Init+0x270>)
 800220e:	2200      	movs	r2, #0
 8002210:	721a      	strb	r2, [r3, #8]
	Debug.UART_RXNEIE=UART_INTERRUPT_ENABLE_RXNE;
 8002212:	4b8d      	ldr	r3, [pc, #564]	; (8002448 <Init+0x270>)
 8002214:	2201      	movs	r2, #1
 8002216:	725a      	strb	r2, [r3, #9]
	Debug.UART_IDLEIE=UART_INTERRUPT_IS_INHIBITED_IDLE;
 8002218:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <Init+0x270>)
 800221a:	2200      	movs	r2, #0
 800221c:	729a      	strb	r2, [r3, #10]
	Debug.UART_TE=UART_TRANSMITTER_ENABLE;
 800221e:	4b8a      	ldr	r3, [pc, #552]	; (8002448 <Init+0x270>)
 8002220:	2201      	movs	r2, #1
 8002222:	72da      	strb	r2, [r3, #11]
	Debug.UART_RE=UART_RECEIVER_ENABLE;
 8002224:	4b88      	ldr	r3, [pc, #544]	; (8002448 <Init+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	731a      	strb	r2, [r3, #12]
	Debug.UART_RWU=UART_RECEIVER_ACTIVE_MODE;
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <Init+0x270>)
 800222c:	2200      	movs	r2, #0
 800222e:	735a      	strb	r2, [r3, #13]
	Debug.UART_SBK=UART_NO_BREAK_CHARACTER;
 8002230:	4b85      	ldr	r3, [pc, #532]	; (8002448 <Init+0x270>)
 8002232:	2200      	movs	r2, #0
 8002234:	739a      	strb	r2, [r3, #14]
	Debug.UART_BaudRate=9600;
 8002236:	4b84      	ldr	r3, [pc, #528]	; (8002448 <Init+0x270>)
 8002238:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800223c:	61da      	str	r2, [r3, #28]

	//UART Configuration for Raspberry pi communication
	Raspberry.UART_NUM=UART2;
 800223e:	4b83      	ldr	r3, [pc, #524]	; (800244c <Init+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
	Raspberry.UART_ENABLE_STATE=UART_ENABLE;
 8002244:	4b81      	ldr	r3, [pc, #516]	; (800244c <Init+0x274>)
 8002246:	2201      	movs	r2, #1
 8002248:	705a      	strb	r2, [r3, #1]
	Raspberry.UART_WORD_LENGTH=UART_EIGHT_BITS;
 800224a:	4b80      	ldr	r3, [pc, #512]	; (800244c <Init+0x274>)
 800224c:	2200      	movs	r2, #0
 800224e:	709a      	strb	r2, [r3, #2]
	Raspberry.UART_WAKEUP=UART_IDLE_LINE;
 8002250:	4b7e      	ldr	r3, [pc, #504]	; (800244c <Init+0x274>)
 8002252:	2200      	movs	r2, #0
 8002254:	70da      	strb	r2, [r3, #3]
	Raspberry.UART_PARITY_CONTROL_ENABLE=UART_PARITY_DISABLED;
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <Init+0x274>)
 8002258:	2200      	movs	r2, #0
 800225a:	711a      	strb	r2, [r3, #4]
	Raspberry.UART_PARITY_SELECTION=UART_EVEN_PARITY;
 800225c:	4b7b      	ldr	r3, [pc, #492]	; (800244c <Init+0x274>)
 800225e:	2200      	movs	r2, #0
 8002260:	715a      	strb	r2, [r3, #5]
	Raspberry.UART_PEIE=UART_INTERRUPT_IS_INHIBITED_PE;
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <Init+0x274>)
 8002264:	2200      	movs	r2, #0
 8002266:	719a      	strb	r2, [r3, #6]
	Raspberry.UART_TXEIE=UART_INTERRUPT_IS_INHIBITED_TXE;
 8002268:	4b78      	ldr	r3, [pc, #480]	; (800244c <Init+0x274>)
 800226a:	2200      	movs	r2, #0
 800226c:	71da      	strb	r2, [r3, #7]
	Raspberry.UART_TCIE=UART_INTERRUPT_IS_INHIBITED_TC;
 800226e:	4b77      	ldr	r3, [pc, #476]	; (800244c <Init+0x274>)
 8002270:	2200      	movs	r2, #0
 8002272:	721a      	strb	r2, [r3, #8]
	Raspberry.UART_RXNEIE=UART_INTERRUPT_ENABLE_RXNE;
 8002274:	4b75      	ldr	r3, [pc, #468]	; (800244c <Init+0x274>)
 8002276:	2201      	movs	r2, #1
 8002278:	725a      	strb	r2, [r3, #9]
	Raspberry.UART_IDLEIE=UART_INTERRUPT_IS_INHIBITED_IDLE;
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <Init+0x274>)
 800227c:	2200      	movs	r2, #0
 800227e:	729a      	strb	r2, [r3, #10]
	Raspberry.UART_TE=UART_TRANSMITTER_ENABLE;
 8002280:	4b72      	ldr	r3, [pc, #456]	; (800244c <Init+0x274>)
 8002282:	2201      	movs	r2, #1
 8002284:	72da      	strb	r2, [r3, #11]
	Raspberry.UART_RE=UART_RECEIVER_ENABLE;
 8002286:	4b71      	ldr	r3, [pc, #452]	; (800244c <Init+0x274>)
 8002288:	2201      	movs	r2, #1
 800228a:	731a      	strb	r2, [r3, #12]
	Raspberry.UART_RWU=UART_RECEIVER_ACTIVE_MODE;
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <Init+0x274>)
 800228e:	2200      	movs	r2, #0
 8002290:	735a      	strb	r2, [r3, #13]
	Raspberry.UART_SBK=UART_NO_BREAK_CHARACTER;
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <Init+0x274>)
 8002294:	2200      	movs	r2, #0
 8002296:	739a      	strb	r2, [r3, #14]
	Raspberry.UART_BaudRate=9600;
 8002298:	4b6c      	ldr	r3, [pc, #432]	; (800244c <Init+0x274>)
 800229a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800229e:	61da      	str	r2, [r3, #28]

	/*Initializing RCC and Clocks for Peripherals*/
    MRCC_voidInit();
 80022a0:	f7ff f802 	bl	80012a8 <MRCC_voidInit>
    MRCC_voidControlPeripheralsClock(APB2, IOPA, ENABLE_PERIPHERAL);
 80022a4:	2201      	movs	r2, #1
 80022a6:	2102      	movs	r1, #2
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff f911 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
    MRCC_voidControlPeripheralsClock(APB2, IOPB, ENABLE_PERIPHERAL);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2103      	movs	r1, #3
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff f90c 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
    MRCC_voidControlPeripheralsClock(APB1, I2C1, ENABLE_PERIPHERAL);
 80022b8:	2201      	movs	r2, #1
 80022ba:	2115      	movs	r1, #21
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff f907 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
    MRCC_voidControlPeripheralsClock(APB2, ADC1, ENABLE_PERIPHERAL);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2109      	movs	r1, #9
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff f902 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
    MRCC_voidControlPeripheralsClock(APB1, TIM3, ENABLE_PERIPHERAL);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2101      	movs	r1, #1
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff f8fd 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
	MRCC_voidControlPeripheralsClock(APB1, USART3, ENABLE_PERIPHERAL);
 80022d6:	2201      	movs	r2, #1
 80022d8:	2112      	movs	r1, #18
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff f8f8 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
	MRCC_voidControlPeripheralsClock(APB1, USART2, ENABLE_PERIPHERAL);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2111      	movs	r1, #17
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff f8f3 	bl	80014d0 <MRCC_voidControlPeripheralsClock>
	MRCC_voidControlPeripheralsClock(APB2, USART1, ENABLE_PERIPHERAL);
 80022ea:	2201      	movs	r2, #1
 80022ec:	210e      	movs	r1, #14
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7ff f8ee 	bl	80014d0 <MRCC_voidControlPeripheralsClock>

	//MotorDrivers Pins
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN12, GPIO_U8_OUTPUT_PP_2MHZ);  //right motor cw
 80022f4:	2202      	movs	r2, #2
 80022f6:	210c      	movs	r1, #12
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fdc7 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN13, GPIO_U8_OUTPUT_PP_2MHZ);  //right motor ccw
 80022fe:	2202      	movs	r2, #2
 8002300:	210d      	movs	r1, #13
 8002302:	2001      	movs	r0, #1
 8002304:	f7fe fdc2 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN14, GPIO_U8_OUTPUT_PP_2MHZ); //left motor cw
 8002308:	2202      	movs	r2, #2
 800230a:	210e      	movs	r1, #14
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe fdbd 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN15, GPIO_U8_OUTPUT_PP_2MHZ); //left motor ccw
 8002312:	2202      	movs	r2, #2
 8002314:	210f      	movs	r1, #15
 8002316:	2001      	movs	r0, #1
 8002318:	f7fe fdb8 	bl	8000e8c <MDIO_voidSetPinDirection>

	//Selector Pins input pull up/down
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN11, GPIO_U8_INPUT_PULL_UP_DOWN);
 800231c:	2208      	movs	r2, #8
 800231e:	210b      	movs	r1, #11
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fdb3 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN12, GPIO_U8_INPUT_PULL_UP_DOWN);
 8002326:	2208      	movs	r2, #8
 8002328:	210c      	movs	r1, #12
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fdae 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN15, GPIO_U8_INPUT_PULL_UP_DOWN);
 8002330:	2208      	movs	r2, #8
 8002332:	210f      	movs	r1, #15
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe fda9 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN3, GPIO_U8_INPUT_PULL_UP_DOWN);
 800233a:	2208      	movs	r2, #8
 800233c:	2103      	movs	r1, #3
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe fda4 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN4, GPIO_U8_INPUT_PULL_UP_DOWN);
 8002344:	2208      	movs	r2, #8
 8002346:	2104      	movs	r1, #4
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fd9f 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN5, GPIO_U8_INPUT_PULL_UP_DOWN);
 800234e:	2208      	movs	r2, #8
 8002350:	2105      	movs	r1, #5
 8002352:	2001      	movs	r0, #1
 8002354:	f7fe fd9a 	bl	8000e8c <MDIO_voidSetPinDirection>

	//pull up
	MDIO_voidSetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN11, GPIO_U8_HIGH);
 8002358:	2201      	movs	r2, #1
 800235a:	210b      	movs	r1, #11
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fe6d 	bl	800103c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN12, GPIO_U8_HIGH);
 8002362:	2201      	movs	r2, #1
 8002364:	210c      	movs	r1, #12
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fe68 	bl	800103c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(GPIO_U8_PORTA, GPIO_U8_PIN15, GPIO_U8_HIGH);
 800236c:	2201      	movs	r2, #1
 800236e:	210f      	movs	r1, #15
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fe63 	bl	800103c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN3, GPIO_U8_HIGH);
 8002376:	2201      	movs	r2, #1
 8002378:	2103      	movs	r1, #3
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe fe5e 	bl	800103c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN4, GPIO_U8_HIGH);
 8002380:	2201      	movs	r2, #1
 8002382:	2104      	movs	r1, #4
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fe59 	bl	800103c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(GPIO_U8_PORTB, GPIO_U8_PIN5, GPIO_U8_HIGH);
 800238a:	2201      	movs	r2, #1
 800238c:	2105      	movs	r1, #5
 800238e:	2001      	movs	r0, #1
 8002390:	f7fe fe54 	bl	800103c <MDIO_voidSetPinValue>

	//PWM Pins (TIM3 Channel 1 and Channel 2)
    MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN6, GPIO_U8_OUTPUT_AF_PP_2MHZ); //right motor speed
 8002394:	220a      	movs	r2, #10
 8002396:	2106      	movs	r1, #6
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fd77 	bl	8000e8c <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN7, GPIO_U8_OUTPUT_AF_PP_2MHZ); //left motor speed
 800239e:	220a      	movs	r2, #10
 80023a0:	2107      	movs	r1, #7
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fd72 	bl	8000e8c <MDIO_voidSetPinDirection>

    //ADC Pins (Channel 0 and Channel 1)
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN0, GPIO_U8_INPUT_ANALOG);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7fe fd6d 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN1, GPIO_U8_INPUT_ANALOG);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe fd68 	bl	8000e8c <MDIO_voidSetPinDirection>

	//I2C1 Pins
    MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN6, GPIO_U8_OUTPUT_AF_OD_2MHZ);
 80023bc:	220e      	movs	r2, #14
 80023be:	2106      	movs	r1, #6
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7fe fd63 	bl	8000e8c <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN7, GPIO_U8_OUTPUT_AF_OD_2MHZ);
 80023c6:	220e      	movs	r2, #14
 80023c8:	2107      	movs	r1, #7
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd5e 	bl	8000e8c <MDIO_voidSetPinDirection>

    //UART3 Pins
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN10, GPIO_U8_OUTPUT_AF_PP_2MHZ);
 80023d0:	220a      	movs	r2, #10
 80023d2:	210a      	movs	r1, #10
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7fe fd59 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTB, GPIO_U8_PIN11, GPIO_U8_INPUT_FLOATING);
 80023da:	2204      	movs	r2, #4
 80023dc:	210b      	movs	r1, #11
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe fd54 	bl	8000e8c <MDIO_voidSetPinDirection>
	//UART2 Pins
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN2, GPIO_U8_OUTPUT_AF_PP_2MHZ);
 80023e4:	220a      	movs	r2, #10
 80023e6:	2102      	movs	r1, #2
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fd4f 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN3, GPIO_U8_INPUT_FLOATING);
 80023ee:	2204      	movs	r2, #4
 80023f0:	2103      	movs	r1, #3
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fd4a 	bl	8000e8c <MDIO_voidSetPinDirection>
	//UART1 Pins
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN9, GPIO_U8_OUTPUT_AF_PP_2MHZ);
 80023f8:	220a      	movs	r2, #10
 80023fa:	2109      	movs	r1, #9
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fd45 	bl	8000e8c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(GPIO_U8_PORTA, GPIO_U8_PIN10, GPIO_U8_INPUT_FLOATING);
 8002402:	2204      	movs	r2, #4
 8002404:	210a      	movs	r1, #10
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fd40 	bl	8000e8c <MDIO_voidSetPinDirection>

	MUART_voidInit(&Debug);
 800240c:	480e      	ldr	r0, [pc, #56]	; (8002448 <Init+0x270>)
 800240e:	f7ff fc07 	bl	8001c20 <MUART_voidInit>
	MUART_voidInit(&Raspberry);
 8002412:	480e      	ldr	r0, [pc, #56]	; (800244c <Init+0x274>)
 8002414:	f7ff fc04 	bl	8001c20 <MUART_voidInit>

	MPWM_voidInit();
 8002418:	f7fe ff10 	bl	800123c <MPWM_voidInit>
	MSTK_voidInit();
 800241c:	f7ff fba4 	bl	8001b68 <MSTK_voidInit>

	//UART2, UART3 Enable Interrupt
	MNVIC_voidInit();
 8002420:	f7fe fece 	bl	80011c0 <MNVIC_voidInit>
	MNVIC_voidEnableInterrupt(38); //UART2
 8002424:	2026      	movs	r0, #38	; 0x26
 8002426:	f7fe fed9 	bl	80011dc <MNVIC_voidEnableInterrupt>
	MUART2_voidSetCallBack(GetDateFromRaspberryPi);
 800242a:	4809      	ldr	r0, [pc, #36]	; (8002450 <Init+0x278>)
 800242c:	f7ff fdce 	bl	8001fcc <MUART2_voidSetCallBack>
	MNVIC_voidEnableInterrupt(39); //UART3
 8002430:	2027      	movs	r0, #39	; 0x27
 8002432:	f7fe fed3 	bl	80011dc <MNVIC_voidEnableInterrupt>
	MUART3_voidSetCallBack(GetDateFromDebug);
 8002436:	4807      	ldr	r0, [pc, #28]	; (8002454 <Init+0x27c>)
 8002438:	f7ff fde4 	bl	8002004 <MUART3_voidSetCallBack>

	MADC1_voidInit();
 800243c:	f7fe fcfe 	bl	8000e3c <MADC1_voidInit>

    MI2C_MasterInit();
 8002440:	f7fe fe98 	bl	8001174 <MI2C_MasterInit>

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000094 	.word	0x20000094
 800244c:	20000074 	.word	0x20000074
 8002450:	0800211d 	.word	0x0800211d
 8002454:	0800217d 	.word	0x0800217d

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	; (80024e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	; (80024ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ce:	f7ff ffe4 	bl	800249a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d2:	f000 f80f 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d6:	f7ff fdc9 	bl	800206c <main>
  bx lr
 80024da:	4770      	bx	lr
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80024e4:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80024e8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80024ec:	200000b4 	.word	0x200000b4

080024f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>
	...

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2600      	movs	r6, #0
 80024f8:	4d0c      	ldr	r5, [pc, #48]	; (800252c <__libc_init_array+0x38>)
 80024fa:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <__libc_init_array+0x3c>)
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	f000 f81a 	bl	800253c <_init>
 8002508:	2600      	movs	r6, #0
 800250a:	4d0a      	ldr	r5, [pc, #40]	; (8002534 <__libc_init_array+0x40>)
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <__libc_init_array+0x44>)
 800250e:	1b64      	subs	r4, r4, r5
 8002510:	10a4      	asrs	r4, r4, #2
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	f855 3b04 	ldr.w	r3, [r5], #4
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	f855 3b04 	ldr.w	r3, [r5], #4
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	08002594 	.word	0x08002594
 8002530:	08002594 	.word	0x08002594
 8002534:	08002594 	.word	0x08002594
 8002538:	08002598 	.word	0x08002598

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
